---
title: "Report"
subtitle: "Introduction to Geographic Information Systems at TU Dresden"
author: "Tuan Linh Tran, Andrea Češková, Tobias Gruner "
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    citations-hover: true
    footnotes-hover: true
bibliography: references.bib
link-citations: true
---

```{r packages + data loading}
#| message: false
#| warning: false
#| include: false
library(pacman)
p_load(here,
       dplyr,
       ggplot2,
       sf,
       terra,
       janitor,
       tidyverse,
       kableExtra,
       DT,
       broom,
       modelsummary,
       stargazer,
       gt,
       tidyr,
       viridis,
       ggspatial,
       leaflet,
       RColorBrewer)

# Population density
pop2 <- rast(here("data", "nld_population_2019.tif"))

# Administrive boundaries
nld_2 <- geodata::gadm(country = "NLD", level = 2, path=tempdir())
nld_2_sf <- st_as_sf(nld_2)

# Temperature
temp <- rast(here("data", "temp.nc"))
temp_df <- as.data.frame(temp, xy = TRUE, na.rm = TRUE)

# Land Use
clc_nl <- vect(here("data", "clc_nl.gpkg"))
clc_nl_sf <- st_as_sf(clc_nl)
```

# Goal of the analysis

Research question: **How does the relationship between population density and temperature vary across different land use types around Netherlands?**

# Data

-   [Administrative boundaries](https://gadm.org/) (@hijmans_gadm_2023)

-   [Temperature data](https://chelsa-climate.org/) (@karger_climatologies_2017)

-   [Land use](https://land.copernicus.eu/en/products/corine-land-cover) (@european_environment_agency_corine_2020)

-   [Population density](https://www.worldpop.org/) (@tatem_worldpop_2017)

## Outcome variable: Temperature

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-cap: "Mean Temperature by Region"
#| label: fig-temp

# Extracting temperature values for each administrative region
# Calculating mean temperature for each region
temp_by_region <- terra::extract(temp, nld_2, fun = mean, na.rm = TRUE, ID = TRUE)

# Merging with administrative boundaries
nld_2_df <- as.data.frame(nld_2)
temp_regions <- merge(temp_by_region, nld_2_df, by.x = "ID", by.y = 0)

# Adding temperature data to the sf object
nld_2_sf$mean_temp <- temp_regions$Band1[match(1:nrow(nld_2_sf), temp_regions$ID)]

# Removing any regions with missing temperature data
nld_2_sf <- nld_2_sf %>%
  filter(!is.na(mean_temp))

# Creating color palette for temperature
pal <- colorNumeric(
  palette = "RdYlBu",  # Red-Yellow-Blue palette 
  domain = nld_2_sf$mean_temp,
  reverse = TRUE  # Reverse so red represents higher temperatures
)

# Creating popup content 
popup_content <- paste0(
  "<div style='font-family: Arial, sans-serif; font-size: 14px;'>",
  "<strong style='color: #2c3e50; font-size: 16px;'>", nld_2_sf$NAME_2, "</strong><br/>",
  "<strong>Province:</strong> ", nld_2_sf$NAME_1, "<br/>",
  "<strong>Mean Temperature:</strong> ", round(nld_2_sf$mean_temp, 2), "°C<br/>",
  "<em style='color: #666; font-size: 12px;'>Data: CHELSA 2019</em>",
  "</div>"
)

# Creating the map
leaflet(nld_2_sf) %>%
  # Adding base map
  addProviderTiles("CartoDB.Positron", 
                   options = providerTileOptions(opacity = 0.8)) %>%
  
  # Adding polygons with temperature data
  addPolygons(
    fillColor = ~pal(mean_temp),
    fillOpacity = 0.8,
    color = "white",
    weight = 1.5,
    opacity = 1,
    popup = popup_content,
    label = ~paste0(NAME_2, ": ", round(mean_temp, 2), "°C"),
    labelOptions = labelOptions(
      style = list("font-weight" = "normal", padding = "3px 8px"),
      textsize = "12px",
      direction = "auto"
    ),
    highlightOptions = highlightOptions(
      weight = 3,
      color = "#2c3e50",
      fillOpacity = 0.9,
      bringToFront = TRUE
    )
  ) %>%
  
  # Adding legend
  addLegend(
    "bottomright",
    pal = pal,
    values = ~mean_temp,
    title = "Mean Temperature<br/>(°C, 2019)",
    opacity = 1,
    labFormat = labelFormat(suffix = "°C", digits = 1)
  ) %>%
  
  # Adding title and attribution
  addControl(
    html = "<div style='background: rgba(255,255,255,0.9); padding: 10px; border-radius: 5px; font-family: Arial;'>
              <h3 style='margin: 0; color: #2c3e50;'>Mean Temperature by Region</h3>
              <p style='margin: 5px 0 0 0; color: #666; font-size: 12px;'>Netherlands, 2019</p>
            </div>",
    position = "topleft"
  ) %>%
  
  # Setting view to center on Netherlands
  setView(lng = 5.2913, lat = 52.1326, zoom = 7) %>%
  
  # Adding scale bar
  addScaleBar(position = "bottomleft", options = scaleBarOptions(imperial = FALSE))

```

## Summary Statistics

```{r}
#| echo: false
#| message: false
#| warning: false
#| tbl-cap: "Available valid data"
#| label: tbl-popdata

# Resampling just to make sure the resolutions match
pop_resampled <- resample(pop2, temp, method = "bilinear")

# First, creating a combined raster stack
temp_pop_stack <- c(temp, pop_resampled)
names(temp_pop_stack) <- c("temperature", "population")

# Extract values at land use polygon locations
# This extracts the mean value for each polygon
extracted_values_table <- terra::extract(temp_pop_stack, clc_nl, 
                                         fun = mean, 
                                         na.rm = TRUE,
                                         ID = TRUE)

# Combining with land use attributes
clc_nl_df <- as.data.frame(clc_nl)
table_data <- merge(extracted_values_table, 
                    clc_nl_df[, c("Code_18", "Label2")], 
                    by.x = "ID", 
                    by.y = 0)  # 0 refers to row numbers

# Using Label2 for the summary table
# This groups the land use types according to the Corine classification hierarchy
table_data <- table_data %>%
  rename(landuse = Label2) %>%
  filter(!is.na(landuse))

# Log-transform population due to skewness (add 1 to handle zeros)
table_data$log_population <- log(table_data$population + 1)

# Summarize pixel statistics by land use category
pixel <- table_data %>%
  group_by(landuse) %>%
  summarise(
    total_pixels = n(),
    valid_pop_pixels = sum(!is.na(population)),
    percent_valid = round(100 * valid_pop_pixels / total_pixels, 1),
    .groups = "drop"
  ) %>%
  rename(
    `Land Use Type` = landuse,
    `Total Pixels` = total_pixels,
    `Valid Population Pixels` = valid_pop_pixels,
    `% Valid` = percent_valid
  )

html_pixel_table <- pixel %>%
  kable(format = "html", 
        escape = FALSE,
        align = c("l", "r", "r", "r")) %>%  # 4 cột: landuse, total, valid, percent
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "center",
    font_size = 14
  ) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#4a6fa5") %>%
  column_spec(1, bold = TRUE, width = "180px") %>%       # landuse
  column_spec(2:4, width = "100px") %>%                  # numeric columns
  footnote(
    general = "Calculated using population raster with NA values removed.",
    general_title = "Note: ",
    footnote_as_chunk = TRUE
  )

# Display the table
html_pixel_table
```

Although some land use categories such as Inland waters, Wetlands, and Sparse vegetation have a low proportion of valid population pixels (often below 50%), we chose to retain them in the @tbl-stats table for the sake of completeness and visual consistency.

However, we acknowledge that the population means and correlation values in these categories may be statistically unreliable due to sparse or uneven data coverage. In particular, categories like Marine waters include only a few valid observations, resulting in potentially misleading or exaggerated correlation coefficients. We document this in the @tbl-popdata.

To address this, we highlighted such rows in the @tbl-stats and excluded their population and correlation values from the @fig-land, to prevent visual misinterpretation while preserving transparency in reporting.

```{r}
#| echo: false
#| message: false
#| warning: false
#| tbl-cap: "Summary statistics"
#| label: tbl-stats
#| 
summary_stats <- table_data %>%
  group_by(landuse) %>%
  summarise(
    n = n(),
    mean_temp = mean(temperature, na.rm = TRUE),
    sd_temp = sd(temperature, na.rm = TRUE),
    mean_pop = mean(population, na.rm = TRUE),
    median_pop = median(population, na.rm = TRUE),
    correlation = cor(temperature, population, use = "complete.obs")
  ) %>%
  arrange(desc(n))

# Adding formatting
summary_stats_formatted <- summary_stats %>%
  mutate(
    # Format numbers nicely
    n = format(n, big.mark = ","),
    mean_temp = round(mean_temp, 2),
    sd_temp = round(sd_temp, 2),
    mean_pop = format(round(mean_pop, 2), big.mark = ","),
    median_pop = format(round(median_pop, 2), big.mark = ","),
    correlation = format(round(correlation, 2), big.mark = ",")
  ) %>%
  rename(
    "Land Use Type" = landuse,
    "Sample Size" = n,
    "Mean Temperature (°C)" = mean_temp,
    "SD Temperature (°C)" = sd_temp,
    "Mean Population" = mean_pop,
    "Median Population" = median_pop,
    "Correlation temperature ~ population" = correlation
  )

# Step 3: Identify rows that may contain biased data (due to sparse population coverage)
suspicious_types <- c(
  "Inland waters", 
  "Inland wetlands", 
  "Maritime wetlands", 
  "Open spaces with little or no vegetation", 
  "Marine waters"
)

# Get row indices for those suspicious land use types (after renaming)
rows_to_highlight <- which(summary_stats_formatted$`Land Use Type` %in% suspicious_types)

# Adding formatting with kableExtra
html_table <- summary_stats_formatted %>%
  kable(format = "html", 
        escape = FALSE,
        align = c("l", "r", "r", "r", "r", "r")) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "center",
    font_size = 14
  ) %>%
  row_spec(0, bold = TRUE, color = "white", background = "#4a6fa5") %>%
  row_spec(rows_to_highlight, background = "#fff3cd") %>% 
  column_spec(1, bold = TRUE, width = "150px") %>%
  column_spec(2:6, width = "120px") %>%
  footnote(
    general = "Data from Netherlands 2019: Temperature (CHELSA), Population (WorldPop), Land Use (Corine)",
    general_title = "Source: ",
    footnote_as_chunk = TRUE
  )

# Display the table
html_table
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| fig-cap: "Correlation between Temperature and Population by Land Use Type across the Netherlands"
#| label: fig-land
# 1. Make geometry valid to avoid union errors
clc_nl_valid <- clc_nl_sf %>%
  mutate(geometry = st_make_valid(geometry))

# 2. Aggregate geometry by Label2 (land use category)
label2_geom <- clc_nl_valid %>%
  group_by(Label2) %>%
  summarise(geometry = st_union(geometry), .groups = "drop")

# 3. Merge summary statistics with geometry
summary_stats_sf <- summary_stats %>%
  left_join(label2_geom, by = c("landuse" = "Label2")) %>%
  st_as_sf()

# 4. Define land use types with low valid population coverage
sparse_landuse <- c("Inland waters", "Inland wetlands", "Maritime wetlands", 
                    "Open spaces with little or no vegetation", "Marine waters")

# 5. Create popup content conditionally
popup_text <- ifelse(summary_stats_sf$landuse %in% sparse_landuse,
  # CASE 1: Sparse land use → show Land Use + Mean Temp + warning
  paste0(
    "<strong>Land Use:</strong> ", summary_stats_sf$landuse, "<br>",
    "<strong>Mean Temp:</strong> ", round(summary_stats_sf$mean_temp, 2), " °C<br>",
    "<em>Population and correlation data omitted due to sparse coverage.</em>"
  ),
  # CASE 2: All info available
  paste0(
    "<strong>Land Use:</strong> ", summary_stats_sf$landuse, "<br>",
    "<strong>Mean Temp:</strong> ", round(summary_stats_sf$mean_temp, 2), " °C<br>",
    "<strong>Mean Pop:</strong> ", round(summary_stats_sf$mean_pop / 0.01, 0), " people/km²<br>",
    "<strong>Correlation:</strong> ", round(summary_stats_sf$correlation, 2)
  )
)

# 6. Replace correlation with NA if land use is sparse
summary_stats_sf <- summary_stats_sf %>%
  mutate(
    correlation_display = ifelse(landuse %in% sparse_landuse, NA, correlation)
  )

# 7. Update palette to use this new column
pal <- colorNumeric(palette = "viridis", domain = summary_stats_sf$correlation_display)

# 8. Use correlation_display for fill color
leaflet(summary_stats_sf) %>%
  addProviderTiles("CartoDB.Positron") %>%  
  addPolygons(
    fillColor = ~pal(correlation_display),
    fillOpacity = 0.7,
    color = "white",
    weight = 1,
    popup = popup_text,
    label = ~landuse,
    highlightOptions = highlightOptions(color = "black", weight = 2, bringToFront = TRUE)
  ) %>%
  addLegend(
    "bottomright",
    pal = pal,
    values = ~correlation_display,
    title = "Correlation (Temp ~ Pop)",
    opacity = 1
  )
```

# Regression models

```{r}
#| message: false
#| warning: false
#| include: false
regression_data <- merge(extracted_values_table, 
                    clc_nl_df[, c("Code_18", "Label1")], 
                    by.x = "ID", 
                    by.y = 0)  # 0 refers to row numbers

# Log-transform population due to skewness (add 1 to handle zeros)
regression_data$log_population <- log(regression_data$population + 1)

#Data grouping
regression_data <- regression_data %>%
  rename(landuse = Label1) %>%
  filter(!is.na(landuse))
```

```{r model 1}
#| message: false
#| warning: false
#| include: false
# Model 1: Temperature ~ Population Density
model1 <- lm(temperature ~ log_population, data = regression_data)
summary(model1)
```

```{r model 2}
#| message: false
#| warning: false
#| include: false
# Model 2: Temperature ~ Land Use Type
# First, let's see what land use categories we have
unique_landuse <- unique(regression_data$landuse)
print("Available land use categories:")
print(unique_landuse)

# Setting the most common category as reference
landuse_counts <- table(regression_data$landuse)
most_common <- names(landuse_counts)[which.max(landuse_counts)]
print(paste("Using", most_common, "as reference category"))

regression_data$landuse <- relevel(factor(regression_data$landuse), ref = most_common)
model2 <- lm(temperature ~ landuse, data = regression_data)
summary(model2)
```

```{r model 3}
#| message: false
#| warning: false
#| include: false
# Model 3: Temperature ~ Population Density + Land Use Type + Interaction
model3 <- lm(temperature ~ log_population * landuse, data = regression_data)
summary(model3)

# Model comparison metrics
models_comparison <- data.frame(
  Model = c("Pop Only", "Land Use Only", "Full Model"),
  R_squared = c(summary(model1)$r.squared, 
                summary(model2)$r.squared, 
                summary(model3)$r.squared),
  Adj_R_squared = c(summary(model1)$adj.r.squared, 
                    summary(model2)$adj.r.squared, 
                    summary(model3)$adj.r.squared),
  AIC = c(AIC(model1), AIC(model2), AIC(model3)),
  BIC = c(BIC(model1), BIC(model2), BIC(model3))
)
print(models_comparison)
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| tbl-cap: "Regression Results"
#| label: tbl-reg
create_gt_all_models <- function(models, model_names) {
  
  # Extracting coefficients from all models
  all_coefs <- list()
  
  for (i in seq_along(models)) {
    coef_data <- tidy(models[[i]]) %>%
      mutate(
        model = model_names[i],
        significance = case_when(
          p.value < 0.001 ~ "***",
          p.value < 0.01 ~ "**",
          p.value < 0.05 ~ "*",
          p.value < 0.1 ~ "†",
          TRUE ~ ""
        ),
        estimate_str = paste0(
          format(round(estimate, 3), nsmall = 3),
          significance
        ),
        se_str = paste0("(", format(round(std.error, 3), nsmall = 3), ")"),
        combined = paste0(estimate_str, "\n", se_str)
      ) %>%
      dplyr::select(term, combined, model)
    
    all_coefs[[i]] <- coef_data
  }
  
  # Combining all coefficients
  combined_coefs <- bind_rows(all_coefs) %>%
    pivot_wider(names_from = model, values_from = combined, values_fill = "")
  
  # Cleaning up term names
  combined_coefs <- combined_coefs %>%
    mutate(
      term = case_when(
        term == "(Intercept)" ~ "Intercept",
        term == "log_population" ~ "Log(Population + 1)",
        grepl("landuse_broad", term) ~ gsub("landuse", "Land Use: ", term),
        grepl("log_population:", term) ~ gsub("log_population:landuse", "Log(Pop) × Land Use: ", term),
        TRUE ~ term
      )
    ) %>%
    arrange(
      case_when(
        term == "Intercept" ~ 1,
        term == "Log(Population + 1)" ~ 2,
        grepl("^Land Use:", term) & !grepl("×", term) ~ 3,
        grepl("×", term) ~ 4,
        TRUE ~ 5
      ),
      term
    )
  
  # Extracting model statistics
  model_stats <- list()
  for (i in seq_along(models)) {
    stats <- glance(models[[i]])
    model_stats[[i]] <- tibble(
      model = model_names[i],
      r_squared = format(round(stats$r.squared, 3), nsmall = 3),
      adj_r_squared = format(round(stats$adj.r.squared, 3), nsmall = 3),
      rmse = format(round(stats$sigma, 3), nsmall = 3),
      f_stat = format(round(stats$statistic, 2), nsmall = 2),
      nobs = format(stats$nobs, big.mark = ",")
    )
  }
  
  stats_combined <- bind_rows(model_stats)
  
  # Creating the GT table
  gt_table <- combined_coefs %>%
    gt() %>%
    tab_header(title = "Outcome Variable: Temperature in °C"
    ) %>%
    cols_label(
      term = "Variable"
    ) %>%
    cols_align(
      align = "left",
      columns = term
    ) %>%
    cols_align(
      align = "center",
      columns = -term
    ) %>%
    tab_style(
      style = list(
        cell_text(weight = "bold"),
        cell_fill(color = "#2c3e50"),
        cell_text(color = "white")
      ),
      locations = cells_column_labels()
    ) %>%
    tab_style(
      style = list(
        cell_borders(
          sides = "bottom",
          color = "#2c3e50",
          weight = px(2)
        )
      ),
      locations = cells_column_labels()
    ) %>%
    tab_style(
      style = list(
        cell_text(weight = "bold")
      ),
      locations = cells_body(
        columns = term
      )
    ) %>%
    tab_style(
      style = list(
        cell_fill(color = "#f8f9fa")
      ),
      locations = cells_body(
        rows = seq(1, nrow(combined_coefs), 2)
      )
    ) %>%
    tab_style(
      style = list(
        cell_borders(
          sides = "top",
          color = "#dee2e6",
          weight = px(2)
        )
      ),
      locations = cells_body(
        rows = 1
      )
    )
  
  # Adding model statistics as a footer
  for (i in seq_along(model_names)) {
    model_stat <- stats_combined[i, ]
    gt_table <- gt_table %>%
      tab_footnote(
        footnote = paste0(
          "n = ", model_stat$nobs,
          " | R² = ", model_stat$r_squared,
          " | Adj. R² = ", model_stat$adj_r_squared,
          " | RMSE = ", model_stat$rmse
        ),
        locations = cells_column_labels(columns = model_names[i])
      )
  }
  
  # Adding significance legend
  gt_table <- gt_table %>%
    tab_source_note(
      source_note = "Standard errors in parentheses. Significance: † p < 0.1, * p < 0.05, ** p < 0.01, *** p < 0.001"
    ) %>%
    tab_options(
      table.font.size = px(12),
      heading.title.font.size = px(18),
      heading.subtitle.font.size = px(14),
      footnotes.font.size = px(10),
      source_notes.font.size = px(10),
      table.width = pct(90),
      data_row.padding = px(8)
    )
  
  return(gt_table)
}

# Creating the table with all three models
all_models_gt <- create_gt_all_models(
  models = list(model1, model2, model3),
  model_names = c("Model 1: Population Only", "Model 2: Land Use Only", "Model 3: Full Model")
)
# Displaying 
all_models_gt
```

The regressions models use artificial surfaces as the baseline reference category for all land use comparisons. This means all land use coefficient should be interpreted relative to the temperature patterns observed in artificial surfaces. The analysis of temperature patterns across the Netherlands reveal that areas with higher population density consistently experience elevated temperatures. Model 1 demonstrates that a logarithmic increase in population density corresponds to a 0.031°C increase in temperature in the Model 1 and 0.027°C in the full model.

Relative to artificial surfaces, different land use types exhibit distinct temperature patterns. Agricultural areas show slightly higher temperatures (+0.009-0.022°C) compared to artificial surfaces, suggesting similar thermal characteristics between urban and agricultural environments. In contrast, forested and semi-natural areas provide significant cooling benefits, with temperatures 0.045-0.046°C lower than artificial surfaces. Water bodies also demonstrate cooling effects, particularly pronounced in the full model (-0.125°C), while wetlands show no significant temperature difference from artificial surfaces.

The interaction effects in the full model reveal how population density affects temperature differently across land use types compared to artificial surfaces. Water bodies show the strongest interaction effect (0.076°C), meaning that the population-temperature relationship is much steeper near water bodies than in built environments. Similarly, forested areas (0.041°C) and agricultural areas (0.026°C) show positive interactions, indicating that these land uses are more sensitive to population-related warming than artificial surfaces. Wetlands show no significant interaction effect, suggesting they respond similarly to population pressure as built environments.

These findings suggest that while natural land uses typically provide thermal benefits compared to artificial surfaces, they may be more vulnerable to population-related warming effects. The results highlight that the cooling advantages of forests and water bodies can be disproportionately affected by increased population density, making their preservation in low-density areas crucial for maintaining local climate benefits.

# References
